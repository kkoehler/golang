// Code generated by MockGen. DO NOT EDIT.
// Source: VehicleService.go

// Package mocks is a generated GoMock package.
package mocks

import (
	gomock "github.com/golang/mock/gomock"
	mocktest "golang.source-fellows.com/mocktest"
	reflect "reflect"
)

// MockVehicleRepository is a mock of VehicleRepository interface
type MockVehicleRepository struct {
	ctrl     *gomock.Controller
	recorder *MockVehicleRepositoryMockRecorder
}

// MockVehicleRepositoryMockRecorder is the mock recorder for MockVehicleRepository
type MockVehicleRepositoryMockRecorder struct {
	mock *MockVehicleRepository
}

// NewMockVehicleRepository creates a new mock instance
func NewMockVehicleRepository(ctrl *gomock.Controller) *MockVehicleRepository {
	mock := &MockVehicleRepository{ctrl: ctrl}
	mock.recorder = &MockVehicleRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockVehicleRepository) EXPECT() *MockVehicleRepositoryMockRecorder {
	return m.recorder
}

// Get mocks base method
func (m *MockVehicleRepository) Get(vin string) (*mocktest.Vehicle, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", vin)
	ret0, _ := ret[0].(*mocktest.Vehicle)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get
func (mr *MockVehicleRepositoryMockRecorder) Get(vin interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockVehicleRepository)(nil).Get), vin)
}

// Store mocks base method
func (m *MockVehicleRepository) Store(vehicle *mocktest.Vehicle) (*mocktest.Vehicle, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Store", vehicle)
	ret0, _ := ret[0].(*mocktest.Vehicle)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Store indicates an expected call of Store
func (mr *MockVehicleRepositoryMockRecorder) Store(vehicle interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Store", reflect.TypeOf((*MockVehicleRepository)(nil).Store), vehicle)
}
